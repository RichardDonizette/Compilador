INTRODUÇÃO	11
1. TOKENS	11
2.	REGRAS DE PRODUÇÃO	12
2.1	REGRA DE EXPRESSÃO	12
2.2	REGRA DE DECLARAÇÃO	12
3.	MÉTODO PRINCIPAL	13
4.	GRAFOS SINTÁTICOS	13

 

Introdução

Nesse documento mostraremos como foi feito a implementação para a linguagem criada para a aula denominada X++.
A implementação foi feita a partir da construção de um analisador léxico e sintático utilizando a aplicação JavaCC.
A seguir mostraremos os Tokens definidos, as regras de produção para definir a gramática e os grafos sintáticos de cada uma das estruturas.

1. Tokens

Esses foram os tokens definidos no trabalho como sendo as variáveis terminais, que serão utilizadas para as regras de produção.

 

2.	Regras de produção

2.1	 REGRA DE EXPRESSÃO

Mostraremos uma regra de produção utilizando os tokens definidos no capitulo anterior, essa regra chama-se regra de expressão e nela foi chamado o método “nome_variavel()” onde foi passado o token “< ALFABETO > (< ALFABETO_UNDESCORE >)*array()” onde nome da variável deve-se começar com uma cadeia de caractere seguido de um token chamado <IGUAL> e entre parênteses tem-se as opções sendo um valor e foi utilizado um sinal de pipe (|) sendo uma função lógica “OU”, podendo ser uma operação seguido de um valor ou nome de uma variável e fechando o parênteses com um sinal de asterisco dando a entender que essa possibilidade pode acontecer 0 ou mais vezes na hora do reconhecimento da geração do compilador e por fim um token“<PV>” sendo ; encerrado um fim de instrução. 

 


2.2	REGRA DE DECLARAÇÃO

Aqui tem-se uma outra regra de produção chamada declaração, nela foram utilizadas as expressões com os tokens definido em cima, essa regra será chamada no método principal chamado start.

 




3.	Método Principal

Esse é o método principal chamando as regras de produção já demonstradas, como sendo as regras de declaração e a expressão já mostrada nos capítulos anteriores, com isso serão compiladas e no console do eclipse poderá ser digitado as variáveis terminais de acordo com os tokens apresentados que foram utilizados nestas regras e assim sendo após ser digitado corretamente o compilador retornara uma mensagem que reconheceu a expressão. 

	 

4.	Grafos Sintáticos


 

Acima temos um grafo demonstrando que a partir de um token não terminal chamado “exp” assim serão ramificados para os outros tokens, para assim reconhecendo uma instrução de declaração de um tipo de variável com o nome da variável, seguido de uma vírgula e a outra variável sendo que essas variáveis constituem um array como sendo um vetor para cada nome das variáveis que podem ser utilizados na hora do reconhecimento da expressão desejada e por fim um ponto e vírgula.
 

Aqui se tem outro grafo que se origina de um token não terminal para reconhecer um comentário, onde a partir das outras ramificações desta arvore de derivação serão originadas um início de comentário que foi utilizado o caractere “//” seguido de um “comment” que é o comentário de uma instrução de uma expressão.

 

Aqui se tem outro grafo que se partiu um token não terminal dando a uma operação sendo um nome de uma variável seguido de um sinal de atribuição com o nome da variável que será recebida seguida de uma operação matemática seguido da variável sendo um número e por fim de um ponto e vírgula, tudo isso partindo das ramificações dos tokens gerando uma expressão que tem que ser reconhecida na hora de ser digitado de acordo com os tokens terminais com está sequência desta expressão. 

